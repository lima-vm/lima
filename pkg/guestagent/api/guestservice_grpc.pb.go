// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: guestservice.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuestServiceClient is the client API for GuestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestServiceClient interface {
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error)
	GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GuestService_GetEventsClient, error)
	PostInotify(ctx context.Context, opts ...grpc.CallOption) (GuestService_PostInotifyClient, error)
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (GuestService_TunnelClient, error)
}

type guestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestServiceClient(cc grpc.ClientConnInterface) GuestServiceClient {
	return &guestServiceClient{cc}
}

func (c *guestServiceClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/GuestService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServiceClient) GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GuestService_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuestService_ServiceDesc.Streams[0], "/GuestService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &guestServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuestService_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type guestServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *guestServiceGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guestServiceClient) PostInotify(ctx context.Context, opts ...grpc.CallOption) (GuestService_PostInotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuestService_ServiceDesc.Streams[1], "/GuestService/PostInotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &guestServicePostInotifyClient{stream}
	return x, nil
}

type GuestService_PostInotifyClient interface {
	Send(*Inotify) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type guestServicePostInotifyClient struct {
	grpc.ClientStream
}

func (x *guestServicePostInotifyClient) Send(m *Inotify) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guestServicePostInotifyClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guestServiceClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (GuestService_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuestService_ServiceDesc.Streams[2], "/GuestService/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &guestServiceTunnelClient{stream}
	return x, nil
}

type GuestService_TunnelClient interface {
	Send(*TunnelMessage) error
	Recv() (*TunnelMessage, error)
	grpc.ClientStream
}

type guestServiceTunnelClient struct {
	grpc.ClientStream
}

func (x *guestServiceTunnelClient) Send(m *TunnelMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guestServiceTunnelClient) Recv() (*TunnelMessage, error) {
	m := new(TunnelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuestServiceServer is the server API for GuestService service.
// All implementations must embed UnimplementedGuestServiceServer
// for forward compatibility
type GuestServiceServer interface {
	GetInfo(context.Context, *emptypb.Empty) (*Info, error)
	GetEvents(*emptypb.Empty, GuestService_GetEventsServer) error
	PostInotify(GuestService_PostInotifyServer) error
	Tunnel(GuestService_TunnelServer) error
	mustEmbedUnimplementedGuestServiceServer()
}

// UnimplementedGuestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGuestServiceServer struct {
}

func (UnimplementedGuestServiceServer) GetInfo(context.Context, *emptypb.Empty) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedGuestServiceServer) GetEvents(*emptypb.Empty, GuestService_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedGuestServiceServer) PostInotify(GuestService_PostInotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method PostInotify not implemented")
}
func (UnimplementedGuestServiceServer) Tunnel(GuestService_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedGuestServiceServer) mustEmbedUnimplementedGuestServiceServer() {}

// UnsafeGuestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestServiceServer will
// result in compilation errors.
type UnsafeGuestServiceServer interface {
	mustEmbedUnimplementedGuestServiceServer()
}

func RegisterGuestServiceServer(s grpc.ServiceRegistrar, srv GuestServiceServer) {
	s.RegisterService(&GuestService_ServiceDesc, srv)
}

func _GuestService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuestService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServiceServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuestServiceServer).GetEvents(m, &guestServiceGetEventsServer{stream})
}

type GuestService_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type guestServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *guestServiceGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _GuestService_PostInotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuestServiceServer).PostInotify(&guestServicePostInotifyServer{stream})
}

type GuestService_PostInotifyServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Inotify, error)
	grpc.ServerStream
}

type guestServicePostInotifyServer struct {
	grpc.ServerStream
}

func (x *guestServicePostInotifyServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guestServicePostInotifyServer) Recv() (*Inotify, error) {
	m := new(Inotify)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GuestService_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuestServiceServer).Tunnel(&guestServiceTunnelServer{stream})
}

type GuestService_TunnelServer interface {
	Send(*TunnelMessage) error
	Recv() (*TunnelMessage, error)
	grpc.ServerStream
}

type guestServiceTunnelServer struct {
	grpc.ServerStream
}

func (x *guestServiceTunnelServer) Send(m *TunnelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guestServiceTunnelServer) Recv() (*TunnelMessage, error) {
	m := new(TunnelMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuestService_ServiceDesc is the grpc.ServiceDesc for GuestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GuestService",
	HandlerType: (*GuestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _GuestService_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _GuestService_GetEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostInotify",
			Handler:       _GuestService_PostInotify_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Tunnel",
			Handler:       _GuestService_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "guestservice.proto",
}
